
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <title>天地图－地图API－范例－测面工具</title>
    <script src="/Scripts/jquery-1.10.2.js"></script>
    <script src="/Scripts/jqueryPlugins/jquery_json/Json.js"></script>
    @*<script type="text/javascript" src="http://api.tianditu.com/js/maps.js"></script>*@
    <script src="/Scripts/maps.js"></script>
    <script src="/Scripts/pro/commonKit.js"></script>

    <script>
        var map, zoom = 13, polygonTool, marker;

        function clear2() {
            //alert(11);
            //polygonTool.clear();
            map.clearOverLays();
            parent.$("#Coords").val("");
        }

        function start() {
            //alert(11);
            //polygonTool.clear();
            //map.clearOverLays();
            //parent.$("#Coords").val("");
            var config = {
                strokeColor: "blue", //折线颜色
                fillColor: "#FFFFFF", //填充颜色。当参数为空时，折线覆盖物将没有填充效果
                strokeWeight: "3px", //折线的宽度，以像素为单位
                strokeOpacity: 0.5, //折线的透明度，取值范围0 - 1
                fillOpacity: 0.5 //填充的透明度，取值范围0 - 1
            };
            //创建测面工具对象
            polygonTool = new TPolygonTool(map, config);
            //注册测面工具绘制完成后的事件
            TEvent.addListener(polygonTool, "draw", onDrawPolygon);
            polygonTool.open();

         
        }


        function onLoad() {
            //初始化地图对象
            map = new TMap("mapDiv");
            //设置显示地图的中心点和级别
            map.centerAndZoom(new TLngLat(120.560518, 30.637757), zoom);
            //允许鼠标滚轮放大地图
            map.enableHandleMouseScroll();

            var control = new TMapTypeControl();
            //将地图类型控件添加到地图上
            map.addControl(control);

            var command = pro.commonKit.getUrlParam("command");
            var PkId = pro.commonKit.getUrlParam("PkId");

            var points = [];
            if (PkId > 0 && $("#Coords").val() != "" && $("#Coords").val() != "[]") {
                var pointsJson = JSON.parse($("#Coords").val());
                $.each(pointsJson, function(i, item) {
                    points.push(new TLngLat(item.lngNTU / 100000, item.latNTU / 100000));
                });
                map.centerAndZoom(new TLngLat(points[0].lngNTU / 100000, points[0].latNTU / 100000), zoom);
            }

            switch (command) {
            case "setArea":
                //var config = {
                //    strokeColor: "blue",	//折线颜色
                //    fillColor: "#FFFFFF",	//填充颜色。当参数为空时，折线覆盖物将没有填充效果
                //    strokeWeight: "3px",	//折线的宽度，以像素为单位
                //    strokeOpacity: 0.5,	//折线的透明度，取值范围0 - 1
                //    fillOpacity: 0.5			//填充的透明度，取值范围0 - 1
                //};
                ////创建测面工具对象
                //polygonTool = new TPolygonTool(map, config);
                ////注册测面工具绘制完成后的事件
                //TEvent.addListener(polygonTool, "draw", onDrawPolygon);
                //polygonTool.open();

                if (points.length > 0) {
                    var polygon = new TPolygon(points, { strokeColor: "green", strokeWeight: 6, strokeOpacity: 0.5, fillOpacity: 0.5 });
                    //向地图上添加面
                    map.addOverLay(polygon);
                }

                break;
            case "setPoint":
                TEvent.addListener(map, "click", onMapClick);
                if (points.length > 0) {
                    marker = new TMarker(new TLngLat(points[0].lngNTU / 100000, points[0].latNTU / 100000));
                    map.addOverLay(marker);
                }
                break;
            case "setPoint2":
                if (PkId == "") {
                    TEvent.addListener(map, "click", onMapClick);
                }
                if (points.length > 0) {
                    var marker = new TMarker(new TLngLat(points[0].lngNTU / 100000, points[0].latNTU / 100000));
                    map.addOverLay(marker);
                }
            default:
                break;
            }


        }

        //关闭测面工具
        function onDrawPolygon(bounds, line) {

            var Coords = JSON.stringify(bounds);
            parent.$("#Coords").val(Coords);

            //var polygon = new TPolygon(bounds, { strokeColor: "green", strokeWeight: 6, strokeOpacity: 0.5, fillOpacity: 0.5 });

            ////向地图上添加面
            //map.addOverLay(polygon);
        }

        function onMapClick(p) {

            lnglat = map.fromContainerPixelToLngLat(p);
            //alert(lnglat.getLng() + "," + lnglat.getLat());

            var marker = new TMarker(lnglat);
            map.addOverLay(marker);


            var Coords = JSON.stringify(lnglat);
            parent.$("#Coords").val(Coords);
        }
        function test() {

            alert(111);
        }

        function hiddenButton() {
            $("#btn1").css("display", "none");
            $("#btn2").css("display", "none");
        }


    </script>
</head>
<body onLoad="onLoad()">
    <input id="Coords" value="@ViewBag.Coords" style="display: none" />
    <input type="button" value="清空坐标" onclick="clear2()" id="btn1" />
    <input type="button" value="开始标注" onclick="start()" id="btn2" />

    <div id="mapDiv" style="position: absolute; width:100%; height: 470px"></div>
</body>
</html>